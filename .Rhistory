Sys.getenv()
Sys.which("make")
remotes::install_github("josiahparry/placekey")
San_mateo_cities_names <-
c("Atherton",
"Belmont",
"Brisbane",
"Burlingame",
"Daly City",
"El Granada",
"East Palo Alto",
"Foster City",
"Half Moon Bay",
"Hillsborough",
"La Honda",
"Loma Mar",
"Menlo Park",
"Millbrae",
"Montara",
"Moss Beach",
"North Fair Oaks",
"Pacifica",
"Pescadero",
"Portola Valley",
"Redwood City",
"San Bruno",
"San Carlos",
"San Francisco",
"San Gregorio",
"San Mateo",
"South San Francisco")
ca_cities <- places("CA", cb = F, progress_bar = FALSE)
library(tigris)
library(sf)
options(tigris_use_cache = TRUE)
ca_cities <- places("CA", cb = F, progress_bar = FALSE)
san_mateo_cities <-
ca_cities %>%
filter(NAME %in% San_mateo_cities_names)
san_mateo_cities <-
ca_cities %>%
filter(NAME %in% San_mateo_cities_names)
View(ca_cities)
library(tidyverse)
san_mateo_cities <-
ca_cities %>%
filter(NAME %in% San_mateo_cities_names)
smc_cities_2 <-
san_mateo_cities %>%
st_transform(26910)
saveRDS(smc_cities_2, "smc_cities_2.rds")
gc()
expanded_address_segments_east_sj_210301 <- readRDS("~/GitHub/covid19/scc_cict/expanded_address_segments_east_sj_210301.rds")
View(expanded_address_segments_east_sj_210301)
library(sf)
library(mapview)
mapview(expanded_address_segments_east_sj_210301 %>% st_set_geometry("address_geometry"))
library(censusapi)
Sys.setenv(CENSUSKEY = "30f44d95cb0d8c10acfc57d830d39957dbfe8a39") #insert your own key here
CA_pop_ages <-
getCensus(
name = "acs/acs5",
vintage = 2019,
region = "zip code tabulation area:*",
regionin = "state:06",
vars = "group(B01003)"
) %>%
select(!c(state,NAME) & !ends_with(c("1EA","MA","M"))) %>%
pivot_longer(
ends_with("E"),
names_to = "variable",
values_to = "pop_count"
)
library(tidyverse)
Sys.setenv(CENSUSKEY = "30f44d95cb0d8c10acfc57d830d39957dbfe8a39") #insert your own key here
CA_pop_ages <-
getCensus(
name = "acs/acs5",
vintage = 2019,
region = "zip code tabulation area:*",
regionin = "state:06",
vars = "group(B01003)"
) %>%
select(!c(state,NAME) & !ends_with(c("1EA","MA","M"))) %>%
pivot_longer(
ends_with("E"),
names_to = "variable",
values_to = "pop_count"
)
Sys.setenv(CENSUS_KEY="c8aa67e4086b4b5ce3a8717f59faa9a28f611dab")
CA_pop_ages <-
getCensus(
name = "acs/acs5",
vintage = 2019,
region = "zip code tabulation area:*",
regionin = "state:06",
vars = "group(B01003)"
) %>%
select(!c(state,NAME) & !ends_with(c("1EA","MA","M"))) %>%
pivot_longer(
ends_with("E"),
names_to = "variable",
values_to = "pop_count"
)
View(CA_pop_ages)
version
library(sf)
library(leaflet)
library(tigris)
`options(tigris_use_cache = TRUE)`
options(tigris_use_cache = TRUE)
scc_boundary <- counties("CA") |>
filter(NAME == "Santa Clara")
library(sf)
scc_boundary <- counties("CA") |>
filter(NAME == "Santa Clara")
scc_boundary <- counties("CA")
View(scc_boundary)
library(tidyverse)
scc_boundary <- counties("CA") |>
filter(NAME == "Santa Clara")
points <- st_sample(scc_boundary, 100)
View(points)
points <- st_sample(scc_boundary, 100) |>
as.data.frame()
View(points)
class(points)
points <- st_sample(scc_boundary, 100) |>
as.data.frame() |>
st_as_sf()
class(points)
leaflet() |>
addCircleMarkers(
data = points
)
points <- st_sample(scc_boundary, 100) |>
as.data.frame() |>
st_as_sf() |>
st_set_crs(4269)
leaflet() |>
addCircleMarkers(
data = points
)
View(points)
leaflet() |>
addProviderTiles(provider = providers$carto)
leaflet() |>
addProviderTiles(provider = providers$CartoDB.Positron) |>
addCircleMarkers(
data = points
)
library(leaflet.extras)
leaflet() |>
addProviderTiles(provider = providers$CartoDB.Positron) |>
addHeatmap(
data = points
)
projection <- "+proj=utm +zone=10 +ellps=GRS80 +datum=NAD83 +units=ft +no_defs"
scc_raster <- scc_boundary |>
transmute(value = 0) |>
st_rasterize() |>
st_warp(
crs = projection
cellsize = 500
)
scc_raster <- scc_boundary |>
transmute(value = 0) |>
st_rasterize() |>
st_warp(
crs = projection,
cellsize = 500
)
library(stars)
scc_raster <- scc_boundary |>
transmute(value = 0) |>
st_rasterize() |>
st_warp(
crs = projection,
cellsize = 500
)
library(raster)
scc_raster <- scc_boundary |>
transmute(value = 0) |>
st_rasterize() |>
st_warp(
crs = projection,
cellsize = 500
) |>
as("Raster")
points_transformed <- points |>
st_transform(projection)
points_raster <- scc_raster
for(i in nrow(points)){
if(i%%100==0) print(i)
index <- cellFromXY(scc_raster, points_transformed[i,] %>% st_coordinates())
points_raster[index] <- points_raster[index] + 1
}
pal <- colorNumeric(
palette = "Reds",
domain = values(points_raster),
na.color = "transparent"
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(
points_raster,
colors = pal,
opacity = 0.5
) %>%
addLegend(
pal = pal,
values = values(points_raster),
title = "Count"
)
scc_raster <- scc_boundary |>
transmute(value = 0) |>
st_rasterize() |>
st_warp(
crs = projection,
cellsize = 1000
) |>
as("Raster")
points <- st_sample(scc_boundary, 10000) |>
as.data.frame() |>
st_as_sf() |>
st_set_crs(4269)
leaflet() |>
addProviderTiles(provider = providers$CartoDB.Positron) |>
addCircleMarkers(
data = points
)
points_transformed <- points |>
st_transform(projection)
points_raster <- scc_raster
for(i in nrow(points)){
if(i%%100==0) print(i)
index <- cellFromXY(scc_raster, points_transformed[i,] %>% st_coordinates())
points_raster[index] <- points_raster[index] + 1
}
for(i in 1:nrow(points)){
if(i%%100==0) print(i)
index <- cellFromXY(scc_raster, points_transformed[i,] %>% st_coordinates())
points_raster[index] <- points_raster[index] + 1
}
pal <- colorNumeric(
palette = "Reds",
domain = values(points_raster),
na.color = "transparent"
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addRasterImage(
points_raster,
colors = pal,
opacity = 0.5
) %>%
addLegend(
pal = pal,
values = values(points_raster),
title = "Count"
)
data <- readRDS("G:/Shared drives/S22 218Z/Housing (OPA)/Tax History/Stanford_TxH_Tax02_Delivery_20200528/4470001.rds")
View(data)
source("~/.active-rstudio-document", echo=TRUE)
View(data)
library(reticulate)
install.packages("rgee")
library(rgee)
ee_Initialize()
ee_install()
library(reticulate)
reticulate::use_condaenv("rgee", conda = "auto",required = TRUE)
library(rgee)
# ee_install()
ee_Initialize()
library(rgee)
# ee_install()
ee_Initialize()
ee_check()
# ee_install()
rgee::ee_install_upgrade()
# library(reticulate)
# reticulate::use_condaenv("rgee", conda = "auto",required = TRUE)
library(rgee)
ee_check()
library(reticulate)
reticulate::use_condaenv("rgee", conda = "auto",required = TRUE)
# ee_install()
# rgee::ee_install_upgrade()
ee_Initialize()
library(rgee)
# ee_install()
# rgee::ee_install_upgrade()
ee_Initialize()
# library(reticulate)
# reticulate::use_condaenv("rgee", conda = "auto",required = TRUE)
library(rgee)
# ee_install()
# rgee::ee_install_upgrade()
ee_Initialize()
ee_check()
# ee_install()
# rgee::ee_install_upgrade()
ee_Initialize()
# ee_install()
# rgee::ee_install_upgrade()
ee_Initialize(user = "douyang1@stanford.edu")
# rgee::ee_install_upgrade()
ee_Initialize(user = "derekouyang@gmail.com")
# rgee::ee_install_upgrade()
ee$Authenticate()
# ee_install()
remotes::install_github("r-spatial/rgee")
remotes::install_github("r-spatial/rgee")
# library(reticulate)
# reticulate::use_condaenv("rgee", conda = "auto",required = TRUE)
library(rgee)
# ee_install()
# remotes::install_github("r-spatial/rgee")
# rgee::ee_install_upgrade()
ee$Authenticate()
ee_check()
# library(reticulate)
# reticulate::use_condaenv("rgee", conda = "auto",required = TRUE)
library(rgee)
ee_check()
# ee_install()
# remotes::install_github("r-spatial/rgee")
# rgee::ee_install_upgrade()
ee$Authenticate()
ee_Initialize(user = "derekouyang@gmail.com")
library(reticulate)
reticulate::use_condaenv("rgee", conda = "auto",required = TRUE)
ee_check()
library(rgee)
ee_check()
reticulate::py_config()
reticulate::use_condaenv("rgee", conda = "auto",required = TRUE)
ee_check()
# ee_install()
# remotes::install_github("r-spatial/rgee")
# rgee::ee_install_upgrade()
ee$Authenticate()
ee_Initialize(drive = T)
rgee::ee_Initialize(drive = T)
# ee_install()
# remotes::install_github("r-spatial/rgee")
# rgee::ee_install_upgrade()
rgee::ee$Authenticate()
rgee::ee_Initialize(drive = T)
# ee_install()
# remotes::install_github("r-spatial/rgee")
# rgee::ee_install_upgrade()
rgee::ee$Authenticate()
rgee::ee$Initialize()
library(rgee)
ee_check()
reticulate::py_install('earthengine-api==0.1.316', envname='rgee')
# ee_install()
# remotes::install_github("r-spatial/rgee")
# rgee::ee_install_upgrade()
rgee::ee$Authenticate()
rgee::ee_Initialize(drive=T)
data <- read_csv("https://raw.githubusercontent.com/citysystems/citysystems.github.io/master/oce/hubs_from_airtable.csv") %>%
st_as_sf(wkt = "geometry")
library(readr)
library(dplyr)
library(purrr)
library(tidyr)
library(stringr)
library(mapboxapi)
library(sf)
library(leaflet)
library(DT)
library(shiny)
library(qdapRegex)
data <- read_csv("https://raw.githubusercontent.com/citysystems/citysystems.github.io/master/oce/hubs_from_airtable.csv") %>%
st_as_sf(wkt = "geometry")
View(data)
states <- states() %>%
select(STATEFP)
library(tigris)
options(tigris_use_cache = TRUE)
states <- states() %>%
select(STATEFP)
setwd("~/GitHub/afc/derek")
saveRDS(states_raw,"states_raw.rds")
saveRDS(states,"states_raw.rds")
View(states)
library(mapview)
mapview(states)
install.packages("albersusa")
remotes::install_github("hrbrmstr/albersusa")
us_states_outside <- states(cb = TRUE, resolution = "20m") %>%
shift_geometry(position = "outside")
mapview(us_states_outside)
install.packages("urbnmapr")
devtools::install_github("UrbanInstitute/urbnmapr")
devtools::install_github("UrbanInstitute/urbnmapr")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
devtools::install_github("UrbanInstitute/urbnmapr")
devtools::install_github("UrbanInstitute/urbnmapr")
unloadNamespace("cli")
unloadNamespace("pkgbuild")
unloadNamespace("desc")
unloadNamespace("cli")
library(cli)
devtools::install_github("UrbanInstitute/urbnmapr")
unloadNamespace("cli")
unloadNamespace("pkgbuild")
unloadNamespace("desc")
devtools::install_github("UrbanInstitute/urbnmapr")
unloadNamespace("cli")
unloadNamespace("pkgbuild")
unloadNamespace("cli")
devtools::install_github("UrbanInstitute/urbnmapr")
unloadNamespace("pkgbuild")
unloadNamespace("cli")
install.packages("cli")
install.packages("cli")
library(cli)
install.packages("cli")
install.packages("cli")
devtools::install_github("UrbanInstitute/urbnmapr")
library(urbnmapr)
counties_sf <- get_urbn_map("counties", sf = TRUE)
View(counties_sf)
states_sf <- get_urbn_map("states", sf = TRUE)
saveRDS(counties_sf, "counties_sf.rds")
saveRDS(states_sf, "states_sf.rds")
counties_pop <- readRDS("~/GitHub/afc/derek/counties_pop.rds")
counties <- counties_pop %>%
st_drop_geometry() %>%
left_join(counties_sf %>% select(GEOID = county_fips)) %>%
st_as_sf()
library(tidyverse)
counties <- counties_pop %>%
st_drop_geometry() %>%
left_join(counties_sf %>% select(GEOID = county_fips)) %>%
st_as_sf()
library(sf)
counties <- counties_pop %>%
st_drop_geometry() %>%
left_join(counties_sf %>% select(GEOID = county_fips)) %>%
st_as_sf()
st_crs(counties_sf)
counties <- counties_pop %>%
st_drop_geometry() %>%
left_join(counties_sf %>% select(GEOID = county_fips) %>% st_transform(4269)) %>%
st_as_sf()
mapview(counties)
library(mapview)
mapview(counties)
View(counties)
saveRDS(counties,"counties_shift.rds")
st_crs(states_sf)
states_sf <- get_urbn_map("states", sf = TRUE) %>%
st_transform(4269)
saveRDS(states_sf, "states_sf.rds")
shiny::runApp('~/GitHub/oce-hubs')
source("~/GitHub/citysystems.github.io/oce/hub_airtable_processing.R", echo=TRUE)
setwd("~/GitHub/citysystems.github.io")
source("~/GitHub/citysystems.github.io/oce/hub_airtable_processing.R", echo=TRUE)
View(data)
write_csv(data,"oce/hubs_from_airtable.csv")
write_csv(data2,"oce/engagements_from_airtable.csv")
source("~/GitHub/citysystems.github.io/oce/hub_airtable_processing.R", echo=TRUE)
runApp('~/GitHub/oce-hubs')
